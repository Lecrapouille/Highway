#include "Application/GUIMainMenu.hpp"
#include "Application/GUILoadSimulMenu.hpp"
#include "Application/FontManager.hpp"
#include "Core/Simulator/BluePrints.hpp"
#include "Core/Common/FileSystem.hpp"
#include "Core/Common/FilePath.hpp"
#include "MyLogger/Logger.hpp"

#include "Core/Simulator/Vehicle/BluePrint.hpp"

#include "project_info.hpp" // Generated by the Makefile

#include <iostream>

//-----------------------------------------------------------------------------
//! \file Entry point of the car simulation application. Check the command line
//! and if no simulation file is providing start a "hello simulation" demo.
//-----------------------------------------------------------------------------

#define WINDOW_WIDTH 1024
#define WINDOW_HEIGHT 1024

// -----------------------------------------------------------------------------
static void display_project_info()
{
    std::cout << "Welcome to the " << project::info::project_name << " project"
              << " version " << project::info::major_version
              << '.' << project::info::minor_version
              << " compiled in "
              << ((project::info::compilation::mode == project::info::compilation::debug) ? "debug" : "release")
              << " mode " << std::endl
              << "Your code was git cloned on branch " << project::info::git_branch
              << " SHA1 " << project::info::git_sha1 << std::endl
              << "Project search path: " << FilePath::instance().toString() << std::endl
              << "Log file: " << project::info::log_path << std::endl
              << std::endl;
}

// -----------------------------------------------------------------------------
static void init_config()
{
    // Define path for searching resources
#ifdef __APPLE__
    Path::instance().add(osx_get_resources_dir("data"));
#else
    FilePath::instance().add("data").add(project::info::data_path);
#endif
    CONFIG_LOG(mylogger::project::Info(
        project::info::compilation::mode == project::info::compilation::debug,
        project::info::application_name.c_str(),
        project::info::major_version,
        project::info::minor_version,
        project::info::git_branch.c_str(),
        project::info::git_sha1.c_str(),
        project::info::data_path.c_str(),
        project::info::tmp_path.c_str(),
        project::info::log_name.c_str(),
        project::info::log_path.c_str()
    ));
    LOGI("Search path: '%s'", project::info::data_path.c_str());
}

// -----------------------------------------------------------------------------
std::string init_blueprints()
{
    fs::path path(FilePath::instance().expand("blueprints.json"));
    return BluePrints::instance().load(path);

#if 0 // Old API
    //-------------------------------------------------------------------------
    //! \brief Database of car dimensions.
    //-------------------------------------------------------------------------
    BluePrints::instance().init<vehicle::BluePrint>(
    {
        { "Renault.Twingo", { 3.615_m, 1.646_m, 2.492_m, 0.494_m, 0.328_m, 10.0_m } },
        { "Citroen.DS3", { 4.118_m, 1.79_m, 2.558_m, 0.7_m, 0.328_m, 10.4_m } },
        { "Citroen.C3", { 3.941_m, 1.728_m, 2.466_m, 0.66_m, 0.328_m, 10.7_m } },
        { "Nissan.NV200", { 4.321_m, 1.219_m, 2.725_m, 0.840_m, 0.241_m, 10.6_m} },
        { "Audi.A6", { 4.951_m, 1.902_m, 2.924_m, 1.105_m, 0.328_m, 11.7_m } },
        { "Mini.Cooper", { 3.62_m, 1.68_m, 2.46_m, 0.58_m, 0.328_m, 10.7_m } },
    });
    return {};
#endif
}

// -----------------------------------------------------------------------------
static int start_highway(int argc, char* const argv[])
{
    // Initialize the database of blueprints.
    if (std::string err = init_blueprints(); !err.empty())
    {
        LOGAS("Failed loading blueprints. Reason '%s'", err.c_str());
        return EXIT_FAILURE;
    }

    // Load fonts
    if (!FontManager::instance().load("main font", "font.ttf"))
    {
        LOGAS("Failed init the application '%s'", argv[0]);
        return EXIT_FAILURE;
    }

    // SFML application
    Application app(WINDOW_WIDTH, WINDOW_HEIGHT,
                    "Highway: Open-source simulator for autonomous driving "
                    "research");

    // No argument: load an ultra basic simulation set from
    // src/Simulator/Demo.cpp.
    if (argc == 1)
    {
        app.push<GUIMainMenu>("GUIMainMenu");
    }
    // Single argument: load the shared library file passed by command line.
    // The shared library is holding functions for creating the simulation.
    // See Scenarios/API.hpp for more information.
    else
    {
        if (std::string(argv[1]) == "-h" || std::string(argv[1]) == "--help")
        {
            // Display usage
            std::cout << argv[0] << "[scenario file]" << std::endl;
            return EXIT_SUCCESS;
        }
        else if (fs::exists(argv[1]))
        {
            LOGI("Started '%s' with scenario '%s'", argv[0], argv[1]);
            app.push<GUIMainMenu>("GUIMainMenu");
            app.push<GUISimulation>("GUISimulation", argv[1]);
        }
        else
        {
            LOGAS("Fatal: the scenario file '%s' does not exist", argv[1]);
            return EXIT_FAILURE;
        }
    }

    // Infinite loop managing the GUI
    app.loop();

    return EXIT_SUCCESS;
}

int main(int argc, char* const argv[])
{
    init_config();
    display_project_info();

    try
    {
        return start_highway(argc, argv);
    }
    catch (std::string const& msg)
    {
        LOGCS("Caught exception: %s", msg.c_str());
        return EXIT_FAILURE;
    }
    catch (std::exception const& e)
    {
        LOGCS("Caught exception: %s", e.what());
        return EXIT_FAILURE;
    }
}